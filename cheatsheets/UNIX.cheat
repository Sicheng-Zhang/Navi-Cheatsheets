% navi_cheatsheet

# ps: display current processes, no header
ps h

# ps: display processes for all users
ps aux

# ps: show all the processes for user xxx
ps -u xxx

# pkill: kill the process ABC from user xxx using its name
pkill -u xxx ABC

# rm: securely delete a file/folder by overwriting and increasing verbosity
rm -Pv file
rm -Pvrf folder

# tar: create archive.tar from files
tar -cvf archive.tar file1 file2

# tar: list all the files in archive.tar
tar -tvf archive.tar

# tar: extract files from archive.tar
tar -xf archive.tar

# 7z: extract all files from the archive to one directory
7za e archive.zip -oOUTPUT/

# 7z: extract files with full paths from the archive to one directory
7za x archive.zip -oOUTPUT/

# 7z: add files from a folder to the archive (with/without Files/ prefix)
7za a archive.zip Files/
7za a archive.zip Files/*

# 7z: update older files in the archive and add new files to the archive
7za u archive.zip new_files

# 7z: delete files *.bak from the archive
7za d archive.zip *.bak -r

# ix: command line pastebin
echo test.txt | curl -F 'f:1=<-' ix.io
cat test.txt | ix

# xargs: concatenate the lines of a file to 3-colunm lines
cat file | xargs -n3

# xargs: concatenate the lines of a file, using X as a delimiter
cat file | xargs -dX

# xargs: copy all the PNG file to "data/images":
ls *.png | xargs -n1 -I {} cp {} /data/images

# ls: list files that match xxx or yyy
ls -l | egrep -i "xxx|yyy"

# ls: list files that match xxx or YYY with case sensitive
ls -l | egrep "xxx|YYY"

# sed: print line 1 and 3 from a file
sed -n '1p;3p' file

# sed: replace all the "test" with "test2", starting at line N
sed 's/test/test2/Ng' file

# sed: delete all the lines from line 2 to the last line
sed '2,$d' file

# sed: search for all the words, replace them to [word] and print the replaced result
sed -n 's/\w\+/[&]/gp'

# sed: insert 'new line' before all the lines that start with 'test'
sed '/^test/i\new line` file

# sed: insert 'new line' after all the lines that start with 'test'
sed '/^test/a\new line` file

# sed: print last line and its line number
sed -n '$p;$=' file

# sed: add a prefix string to the begining/end of each line
sed -e 's/^/prefix/' file > newfile
sed -e 's/$/prefix/' file > newfile

# print even lines from the file
sed -n 'n;p' file

# print odd lines from the file
sed -n 'p;n' file

# awk: print 'hellow world!' and output to file
echo | awk '{printf("hello word!") > "file"}'

# awk: print last line and its line number
awk 'END{print NR; print }' file

# awk: print 2nd and 4th line of the file
cat file | awk '{ print $2 $4 }'

# awk: print first column with separator -
awk -F- '{print $1}' file

# wc: print number of lines for the file
wc -l < file

# wc: count the number of files (not hidden files) in the current dir
expr $(ls -l | wc -l) - 1

# dmesg: show device drivers info
dmesg | grep -i scsi

# view the status of all mounted file systems
cat /proc/mounts

# watch: watch the contents of a directory change
watch -d ls -l

# watch: watch the contents of a directory that containing "xxx" change
watch -d 'ls -l|grep xxx'

# grep: output the number of lines that contain a string "xxx"
grep -c "xxx" file

# grep: count the number of occurrences of string "xxx" in the file
grep -o "xxx" file | wc -l

# host, dig, nslookup: lookup full DNA info
host -a xxx.com
dig xxx.com
nslookup xxx.com

# find: find all the files with "xxx" in the filename
find . -name "*xxx*"

# find: list all files that have been modified after 5 minute
find . -maxdepth 1 -mmin -5

# find: find and delete all the files, e.g., ".DS_Store"
find . -name ".DS_Store" -delete

# find: find all the files that newer than the file "test.txt"
find . -type f -newer test.txt

# find: find all the files that larger than, smaller than, and equal to 10MB
find  . -type f -size +10M
find  . -type f -size -10M
find  . -type f -size 10M

# find: move all the .txt files that are older than 30 days to ~/Documents/
find . -type f -mtime +30 -name "*.txt" -exec mv {} ~/Documents/ \;

# find: find all the .txt files and rename them to .txt_renamed files
find . -type f -name '*.txt' -exec mv {} {}_renamed \;

# find: find all the .txt files in ./path/ recursively and copy them to ./copy/
find ./path/ -name *.txt -exec cp {} ./copy/ \;

# cut: print column 3 from line 5 to 10
cut -d ' ' -f3 file.txt | sed -n '5,10p' | xargs

# cut: extract 3rd string before a space
echo "s1 s2 s3 s4" | cut -d" " -f3 # outputs s3

# sed: print 3rd to 8th line
sed -n '3,8p' file.txt

# sed: print Nth line from Mth line
sed -n 'M~Np' file.txt

# sed: print lines that contains "text"
sed -n '/text/p' file.txt

# convert: convert png file to eps file
convert input.png eps2:output.eps

# convert: resize image to 1080x720
convert -resize 1080x720 input.png output.png

# convert: convert the full document or page 1 to PNG images
convert -density 300 input.pdf -quality 150 output.png
convert -density 300 input.pdf[0] -quality 150 output.png

# shred: recursively shred all files in a directory
find "path_to_dir" -type f -exec shred {} \;

# g++: set compiler to the C++20 standard, enable compiler warnings
g++ -std=c++20 -Wall -Wextra -Wpedantic input.cpp -o output

# g++: deactivate assertions
g++ -DNDEBUG input.cpp -o output

# g++: complie for gdb debugging
g++ -g input.cpp -o output

# g++: use address sanitizer to detect memory corruptions
g++ input.cpp -o output -fsanitize=address

# g++: detect undefined behavior at runtime
g++ input.cpp -o output -fsanitize=undefined

# xattr: solve the macOS error that an application is damaged
xattr -cr /Applications/XXX.app

# tr: convert the string to lower case
echo "TEST" | tr "[:upper:]" "[:lower:"]

# ssh: copy id_rsa.pub key to the remote host
ssh-copy-id username@remote_host

# ssh: list all running processes of user "user" on the server "user@sever"
ssh user@server -t "ps h -u user"

# du: show the disk usage at depth 1
du -ch -d 1

# rsync: transfer folder "test" on user@server to the local machine, exclude subfolder "data/" and show the process
rsync -a --info=progress2 --exclude='data/' user@server:~/test/ ./

